package org.rascalmpl.values.synclj;

//This code was generated by Rascal API gen
import org.rascalmpl.interpreter.types.RascalTypeFactory;
import org.eclipse.imp.pdb.facts.type.Type;
import org.eclipse.imp.pdb.facts.type.TypeFactory;
import org.eclipse.imp.pdb.facts.type.TypeStore;
import org.eclipse.imp.pdb.facts.*;

public class MetaGrammar {
	public static TypeStore typestore = new TypeStore(
			org.rascalmpl.values.errors.Factory.getStore(),
			org.rascalmpl.values.locations.Factory.getStore());

	private static TypeFactory tf = TypeFactory.getInstance();
	private static RascalTypeFactory rtf = RascalTypeFactory.getInstance();

	public static final Type MetaGrammar = tf.abstractDataType(typestore,
			"MetaGrammar");

	public static final Type Rule = tf.abstractDataType(typestore, "Rule");

	public static final Type MetaGrammar_grammar = tf.constructor(typestore,
			MetaGrammar, "grammar", tf.listType(Rule), "rules");

	public static final Type Alt = tf.abstractDataType(typestore, "Alt");

	public static final Type Rule_rule = tf.constructor(typestore, Rule,
			"rule", tf.stringType(), "name", tf.listType(Alt), "alts");

	public static final Type Exp = tf.abstractDataType(typestore, "Exp");

	public static final Type Alt_alt = tf.constructor(typestore, Alt, "alt",
			tf.stringType(), "name", tf.listType(Exp), "elements");

	public static final Type Exp_keyword = tf.constructor(typestore, Exp,
			"keyword");
	public static final Type Exp_regexp = tf.constructor(typestore, Exp,
			"regexp");
	public static final Type Exp_qquote = tf.constructor(typestore, Exp,
			"qquote", Exp, "arg");
	public static final Type Exp_number = tf.constructor(typestore, Exp,
			"number");
	public static final Type Exp_metaIdent = tf.constructor(typestore, Exp,
			"metaIdent");
	public static final Type Exp_vectorLit = tf.constructor(typestore, Exp,
			"vectorLit", tf.listType(Exp), "args");
	public static final Type Exp_setLit = tf.constructor(typestore, Exp,
			"setLit", tf.listType(Exp), "args");
	public static final Type Exp_metaMap = tf.constructor(typestore, Exp,
			"metaMap", tf.listType(Exp), "args");
	public static final Type Exp_rational = tf.constructor(typestore, Exp,
			"rational");
	public static final Type Exp_unquote = tf.constructor(typestore, Exp,
			"unquote", Exp, "arg");
	public static final Type Exp_listLit = tf.constructor(typestore, Exp,
			"listLit", tf.listType(Exp), "args");
	public static final Type Exp_nonTerminal = tf.constructor(typestore, Exp,
			"nonTerminal", tf.stringType(), "name");
	public static final Type Exp_mapLit = tf.constructor(typestore, Exp,
			"mapLit", tf.listType(Exp), "args");
	public static final Type Exp_form = tf.constructor(typestore, Exp, "form");
	public static final Type Exp_literal = tf.constructor(typestore, Exp,
			"literal", tf.stringType(), "text");
	public static final Type Exp_plus = tf.constructor(typestore, Exp, "plus",
			Exp, "arg");
	public static final Type Exp_symbol = tf.constructor(typestore, Exp,
			"symbol");
	public static final Type Exp_plusSep = tf.constructor(typestore, Exp,
			"plusSep", Exp, "arg", tf.stringType(), "sep");
	public static final Type Exp_float = tf
			.constructor(typestore, Exp, "float");
	public static final Type Exp_quote = tf.constructor(typestore, Exp,
			"quote", Exp, "arg");
	public static final Type Exp_integer = tf.constructor(typestore, Exp,
			"integer");
	public static final Type Exp_string = tf.constructor(typestore, Exp,
			"string");
	public static final Type Exp_opt = tf.constructor(typestore, Exp, "opt",
			Exp, "arg");
	public static final Type Exp_deref = tf.constructor(typestore, Exp,
			"deref", Exp, "arg");
	public static final Type Exp_star = tf.constructor(typestore, Exp, "star",
			Exp, "arg");
	public static final Type Exp_unquotes = tf.constructor(typestore, Exp,
			"unquotes", Exp, "arg");
	public static final Type Exp_starSep = tf.constructor(typestore, Exp,
			"starSep", Exp, "arg", tf.stringType(), "sep");
	public static final Type Exp_metaString = tf.constructor(typestore, Exp,
			"metaString");
	public static final Type Exp_char = tf.constructor(typestore, Exp, "char");
	public static final Type Exp_fnLit = tf.constructor(typestore, Exp,
			"fnLit", tf.listType(Exp), "args");

	public static IList MetaGrammar_grammar_rules(IConstructor c) {
		return (IList) c.get(0);
	}

	public static String Rule_rule_name(IConstructor c) {
		return ((IString) c.get(0)).getValue();
	}

	public static IList Rule_rule_alts(IConstructor c) {
		return (IList) c.get(1);
	}

	public static String Alt_alt_name(IConstructor c) {
		return ((IString) c.get(0)).getValue();
	}

	public static IList Alt_alt_elements(IConstructor c) {
		return (IList) c.get(1);
	}

	public static IConstructor Exp_qquote_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IList Exp_vectorLit_args(IConstructor c) {
		return (IList) c.get(0);
	}

	public static IList Exp_setLit_args(IConstructor c) {
		return (IList) c.get(0);
	}

	public static IList Exp_metaMap_args(IConstructor c) {
		return (IList) c.get(0);
	}

	public static IConstructor Exp_unquote_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IList Exp_listLit_args(IConstructor c) {
		return (IList) c.get(0);
	}

	public static String Exp_nonTerminal_name(IConstructor c) {
		return ((IString) c.get(0)).getValue();
	}

	public static IList Exp_mapLit_args(IConstructor c) {
		return (IList) c.get(0);
	}

	public static String Exp_literal_text(IConstructor c) {
		return ((IString) c.get(0)).getValue();
	}

	public static IConstructor Exp_plus_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IConstructor Exp_plusSep_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static String Exp_plusSep_sep(IConstructor c) {
		return ((IString) c.get(1)).getValue();
	}

	public static IConstructor Exp_quote_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IConstructor Exp_opt_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IConstructor Exp_deref_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IConstructor Exp_star_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IConstructor Exp_unquotes_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static IConstructor Exp_starSep_arg(IConstructor c) {
		return (IConstructor) c.get(0);
	}

	public static String Exp_starSep_sep(IConstructor c) {
		return ((IString) c.get(1)).getValue();
	}

	public static IList Exp_fnLit_args(IConstructor c) {
		return (IList) c.get(0);
	}

	private static final class InstanceHolder {
		public final static MetaGrammar factory = new MetaGrammar();
	}

	public static MetaGrammar getInstance() {
		return InstanceHolder.factory;
	}

	public static TypeStore getStore() {
		return typestore;
	}
}